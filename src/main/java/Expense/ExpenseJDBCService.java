package main.java.Expense;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ExpenseJDBCService implements ExpenseService {

    @Override
    public Expense addExpense(Long itemID) {
        Expense expense = null;
        try(Connection connection = db.getConnection()) {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO expenses (user_id, amount, category, date) Values (?, ?, ?, ?)");
            statement.setLong(1, expense.getUserId());
            statement.setInt(2, expense.getAmount());
            statement.setString(3, expense.getCategory());
            statement.setDate(4, Date.valueOf(expense.getDate()));
            statement.executeUpdate();

            //Retrieve Autogenerated ID
            ResultSet generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                expense.setItemId(generatedKeys.getLong(1));
            }
        }catch (SQLException e){
                throw new RuntimeException("Error saving account", e);
        }
            return expense;
    }

    @Override
    public Expense viewAllExpense(Long userId) {
        List<Expense> expenses = new ArrayList<>();
        try(Connection connection = db.getconnection ){
            PreparedStatement statement;
            statement = connection.prepareStatement(
                    "Select * from expenses WHERE user_id = ?");
            statement.setLong(1, userId);
            ResultSet resultSet = statement.executeQuery();
            if(resultSet.next()){
                Expense expense = new Expense(
                    resultSet.getInt("itemId"),
                    resultSet.getInt("amount"),
                    resultSet.getString("category"),
                    resultSet.getTimestamp("date"));
                    expenses.add(expense);
            }
        }catch(SQLException e){
           throw new RuntimeException("unable to retrieve expenses");
        }
        return expenses;

    }

    @Override
    public Expense deleteExpense(Expense expense) {
        return null;
    }

    @Override
    public Expense filterExpense(Expense expense) {
        return null;
    }

    @Override
    public Expense expenseSummary(Expense expense) {
        return null;
    }
}
